test
test=list("kim",c(64,82,92),c(T,F,T))
test
son=list(son.name=c("Minsu","Minchul"),son.gender=c("Male","Male"),son.age=c(2,6))
son
x=matrix(c(1,2,3,4),nrow=2,ncol=2)
x
x=matrix(c(1,2,3,4))
y=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
X
x=matrix(c(1,2,3,4))
x=matrix(c(1,2,3,4))
y=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
x
y
2+3
?
?
?
?
?
?
?
2+3
x=2
y=3
x+y
x+y
x=2
y=3
x+y
x=2
y=3
x+y
2+2
2+2
2-2
2
2
2+2
2-2
2*2
2/2
2%%2
3/2
3%/%2
2^3
2**3
2^32
2^128
print("The end...")
sum(2,5)
sum<-function(x,y){
return (x+y)
}
sum(2,5)
print("Hi function!")
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
sum(x,y){
print("Hi function!")
return (x+y)
}
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
return print("Hi end")
return print("Hi end")
print("Hi end")
return (x+y)
sum<-function(x,y){
print("Hi function!")
if (x>y)
print("Hi end")
return (x+y)
}
sum(2,5)
print("Hi end")
if (x>y){
print("Hi end")
}
return (x+y)
sum<-function(x,y){
print("Hi function!")
if (x>y){
print("Hi end")
}
return (x+y)
}
sum(2,5)
print("Hi function!")
return (x+y)
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
print("I want to go My Home.. plz")
return (x+y)
sum<-function(x,y){
print("Hi function!")
print("I want to go My Home.. plz")
return (x+y)
}
sum(2,5)
?if
sum(2,5)
sum(2,5)
sum(2,5)
getwd()
read.excel("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.table("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringAsfactor=F)
?read.csv
read.csv("Order1501.csv",sep=",",header=T,stringAsFactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
DATA
str(DATA)
library(dplyr)
DATA[,-c(12,13,16)]
DATA[,-c(12,13,16)]
DATA=DATA[,-c(12,13,16)]
DATA
DATA %>% filter(ItemType=="TAN")
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA %>% filter(is.na(CancelCode))
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA=DATA %>% filter(is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# data.frame의 형태이고, 총 266298개의 행을 가지며 17개의 독립변수가 존재
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
# 2. itemtype에서 TAN만 고려한다.
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA=DATA %>% filter(is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
str(DATA)
library(dplyr)
getwd()
setwd("C:/Users/fkaus/OneDrive/문서/China")
ESCAPE<-read.csv("Escape.csv",sep=",",header=T,stringsAsFactors = F)
ESCAPE
ESCAPE[,"NULL"]<-"2016-01-01"
ESCAPE
ESCAPE[,ESCAPE$퇴사일자=="NULL"]<-"2016-01-01"
ESCAPE[,ESCAPE$퇴사일자=="NULL"]<-"2016-01-01"
ESCAPE
ESCAPE<-read.csv("Escape.csv",sep=",",header=T,stringsAsFactors = F)
ESCAPE
ESCAPE<-read.csv("Escape.csv",sep=",",header=T,stringsAsFactors = F)
library(dplyr)
getwd()
setwd("C:/Users/fkaus/OneDrive/문서/China")
ESCAPE<-read.csv("Escape.csv",sep=",",header=T,stringsAsFactors = F)
ESCAPE
ESCAPE$퇴사일자[ESCAPE$퇴사일자=="NULL"]<-"2016-01-01"
head(ESCAPE)
ESCAPE
summary(ESCAPE)
max(ESCAPE$입사일자)
max(ESCAPE$입사일자)
as.Date(ESCAPE$입사일자)
as.Date(ESCAPE$퇴사일자)
WORKYEAR<-(ESCAPE$퇴사일자-ESCAPE$입사일자)/30
WORKYEAR<-diff.difftime(ESCAPE$퇴사일자,ESCAPE$입사일자)
WORKYEAR
WORKYEAR<-diff.difftime(ESCAPE$퇴사일자,ESCAPE$입사일자)
WORKYEAR<-diff(ESCAPE$퇴사일자,ESCAPE$입사일자)
WORKYEAR<-diff(ESCAPE$퇴사일자,ESCAPE$입사일자)
WORKYEAR
WORKYEAR<-diff(ESCAPE$퇴사일자,ESCAPE$입사일자,lag=1)
WORKYEAR
WORKYEAR<-ESCAPE$퇴사일자-ESCAPE$입사일자
DATA1<-read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
WORKYEAR<-ESCAPE$퇴사일자-ESCAPE$입사일자
DATA1<-read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
WORKYEAR<-ESCAPE$퇴사일자-ESCAPE$입사일자
DATA1<-read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
as.Date(ESCAPE$입사일자)
as.Date(ESCAPE$퇴사일자)
ESCAPE$퇴사일자[1]-ESCAPE$퇴사일자[1]
ESCAPE$퇴사일자[1]-ESCAPE$퇴사일자[1]
ESCAPE$퇴사일자[1]-ESCAPE$퇴사일자[1]
str(ESCAPE)
as.Date(ESCAPE$입사일자)
as.Date(ESCAPE$퇴사일자)
str(as.Date(ESCAPE$입사일자))
ESCAPE$입사일자<-as.Date(ESCAPE$입사일자)
ESCAPE$퇴사일자<-as.Date(ESCAPE$퇴사일자)
ESCAPE$퇴사일자[1]-ESCAPE$퇴사일자[1]
WORKYEAR<-(ESCAPE$퇴사일자-ESCAPE$입사일자)
WORKYEAR
WORKYEAR<-(ESCAPE$퇴사일자-ESCAPE$입사일자)/30
WORKYEAR
setwd("D:/BigDataCampus")
autoparts<-read.csv("autoparts.csv",header=T)
autoparts1<-autoparts[autoparts$prod_no=="90784-76001",c(2:11)]
autoparts2<-autoparts1[autoparts1$c_thickness<1000,]
autoparts2$y_faulty<-ifelse((autoparts2$c_thickness<20)|(autoparts2$c_thickness>32),1,0)
t_index<-sample(1:nrow(autoprats2),size=nrow(autoparts2)*0.7)
t_index<-sample(1:nrow(autoparts2),size=nrow(autoparts2)*0.7)
train<-autoparts2[t_index,]
test<-autoparts2[-t_index,]
nrow(train); nrow(test)
head(train)
m<-svm(factor(y_faulty)~fix_time + a_speed + b_speed + separation + s_separation + rate_terms + mpa + load_time + highpressure_time,data=train
yhat_test<-predict(m,test),gamma=1,cost=16)
m<-svm(factor(y_faulty)~fix_time + a_speed + b_speed + separation + s_separation + rate_terms + mpa + load_time + highpressure_time,data=train,
yhat_test<-predict(m,test),gamma=1,cost=16)
library(e1071)
m<-svm(factor(y_faulty)~fix_time + a_speed + b_speed + separation + s_separation + rate_terms + mpa + load_time + highpressure_time,data=train,
yhat_test<-predict(m,test),gamma=1,cost=16)
m<-svm(factor(y_faulty)~fix_time + a_speed + b_speed + separation + s_separation + rate_terms + mpa + load_time + highpressure_time,data=train,gamma=1,cost=16)
summary(m)
yhat_test<-predict(m,test)
plot(x=test$c_thickness,y=yhat_test,main="SVR")
mse<-mean((yhat_test-test$c_thickness)^2); mse
mse<-mean((yhat_test-test$c_thickness)^2); mse
m<-svm(c_thickness~fix_time + a_speed + b_speed + separation + s_separation + rate_terms + mpa + load_time + highpressure_time,data=train,gamma=1,cost=16)
summary(m)
yhat_test<-predict(m,test)
plot(x=test$c_thickness,y=yhat_test,main="SVR")
mse<-mean((yhat_test-test$c_thickness)^2); mse
# 다중회귀
m2<-lm(c_thickness~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=train)
summary(m2)
yhat_test<-predict(m2,test)
plot(x=test$c_thickness,y=yhat_test,main="lm",xlab = "실제값",ylab="예측값")
mse<-mean((yhat_test-test$c_thickness)^2)
mse
autoparts
autoparts1<-autoparts[autoparts$prod_no=="90784-76001",c(2:11)]
autoparts2<-autoparts1[autoparts1$c_thickness<1000,]
autoparts2$y_faulty<-ifelse((autoparts2$c_thickness<20)|(autoparts2$c_thickness>32),1,0)
autoparts2$y_faulty<-as.factor(autoparts2$y_faulty)
table(autoparts2$y_faulty)
m<-glm(y_faulty~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=autoparts2,family=binomial(logit))
summary(m)
t_index<-sample(1:nrow(autoparts2),size=nrow(autoparts2)*0.7)
train<-autoparts2[t_index,]
test<-autoparts2[-t_index,]
nrow(train); nrow(test)
head(train)
m<-glm(y_faulty~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=train,family=binomial(logit))
m$fitted.values
yhat<-ifelse(m$fitted.values >= 0.5,1,0)
yhat
yhat<-ifelse(m$fitted.values >= 0.5,1,0)
# m$fitted.values는 승산비를 보여준다.
m$fitted.values
yhat<-ifelse(m$fitted.values >= 0.5,1,0)
yhat
sum(yhat)
yhat
table<-table(real=train$y_faulty,predict=yhat)
table
yhat_test<-predict(m,test,type="reponse")
yhat_test<-predict(m,test,type="reponse")
yhat_test<-predict(m,test,type="reponse")
test<-data.frame(fix_time=test$fix_time,a_speed=test$a_speed,b_speed=test$b_speed,separation=test$separation,s_separation=test$s_separation,rate_terms=test$rate_terms,mpa=test$mpa,load_time=test$load_time,highpressure_time=test$highpressure_time)
yhat_test<-predict(m,test,type="reponse")
yhat_test<-predict(m,test,type="reponse")
yhat_test<-predict(m,test,type="response")
ROC(test = yhat_test,stat=test$y_faulty,plot="ROC",AUC=T,main<-"Logistics Regression")
library(Epi)
ROC(test = yhat_test,stat=test$y_faulty,plot="ROC",AUC=T,main<-"Logistics Regression")
ROC(test = yhat_test,stat=test$y_faulty,plot="ROC",AUC=T,main<-"Logistics Regression")
ROC(test = yhat_test,stat=test$y_faulty,plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = yhat_test,stat=test$y_faulty,plot="ROC",AUC=T,main="Logistics Regression")
test<-data.frame(fix_time=test$fix_time,a_speed=test$a_speed,b_speed=test$b_speed,separation=test$separation,s_separation=test$s_separation,rate_terms=test$rate_terms,mpa=test$mpa,load_time=test$load_time,highpressure_time=test$highpressure_time)
yhat_test<-predict(m,test,type="response")
ROC(test = yhat_test, stat=test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
?ROC
test
ROC(test = test, stat=yhat_test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = test, stat=test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = test, stat=yhat$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = test, stat=yhat_test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = yhat, stat=yhat_test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = yhat_test, stat=yhat_test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
ROC(test = yhat_test, stat=yhat_test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
autoparts<-read.csv("autoparts.csv",header=T)
autoparts1<-autoparts[autoparts$prod_no=="90784-76001",c(2:11)]
autoparts2<-autoparts1[autoparts1$c_thickness<1000,]
autoparts2$y_faulty<-ifelse((autoparts2$adc_thickness<20)|(autoparts2$c_thickness>32),1,0)
t_index<-sample(1:nrow(autoparts2),size=nrow(autoparts2)*0.7)
train<-autoparts2[t_index,]
test<-autoparts2[-t_index,]
nrow(train); nrow(test)
head(train)
# Support Vector Machine Regression 이므로 연속형 데이터 타입을 예측한다.
# Cross table이 아닌 MSE로 비교해야한다.
m<-svm(c_thickness~fix_time + a_speed + b_speed + separation + s_separation + rate_terms + mpa + load_time + highpressure_time,data=train,gamma=1,cost=16)
summary(m)
yhat_test<-predict(m,test)
plot(x=test$c_thickness,y=yhat_test,main="SVR")
mse<-mean((yhat_test-test$c_thickness)^2); mse
# 다중회귀
m2<-lm(c_thickness~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=train)
summary(m2)
r
yhat_test<-predict(m2,test)
plot(x=test$c_thickness,y=yhat_test,main="lm",xlab = "실제값",ylab="예측값")
mse<-mean((yhat_test-test$c_thickness)^2)
mse
autoparts
autoparts1<-autoparts[autoparts$prod_no=="90784-76001",c(2:11)]
autoparts2<-autoparts1[autoparts1$c_thickness<1000,]
autoparts2$y_faulty<-ifelse((autoparts2$c_thickness<20)|(autoparts2$c_thickness>32),1,0)
# 종속변수는 factor형이어야 하므로 형변환을 한다.
autoparts2$y_faulty<-as.factor(autoparts2$y_faulty)
table(autoparts2$y_faulty)
m<-glm(y_faulty~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=autoparts2,family=binomial(logit))
# 통계적 유의도를 살펴봅니다.
summary(m)
t_index<-sample(1:nrow(autoparts2),size=nrow(autoparts2)*0.7)
train<-autoparts2[t_index,]
test<-autoparts2[-t_index,]
nrow(train); nrow(test)
m<-glm(y_faulty~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=train,family=binomial(logit))
# m$fitted.values는 승산비를 보여준다.
m$fitted.values
# 이부분의 1과 0의 구분 기준을 정해서 입력해야한다.
yhat<-ifelse(m$fitted.values >= 0.5,1,0)
# 교차 테이블을 만들고, ROC로 활용한다.
table<-table(real=train$y_faulty,predict=yhat)
table
test<-data.frame(fix_time=test$fix_time,a_speed=test$a_speed,b_speed=test$b_speed,separation=test$separation,s_separation=test$s_separation,rate_terms=test$rate_terms,mpa=test$mpa,load_time=test$load_time,highpressure_time=test$highpressure_time)
yhat_test<-predict(m,test,type="response")
library(Epi)
ROC(test = yhat_test, stat=yhat_test$y_faulty, plot="ROC",AUC=T,main="Logistics Regression")
autoparts2$g_class<-as.factor(ifelse(autoparts2$c_thickness<20,1,ifelse(autoparts2$c_thickness<32,2,3)))
table(autoparts2$g_class)
t_index<-sample(1:nrow(autoparts2),size=nrow(autoparts2)*0.7)
train<-autoparts2[t_index,]
test<-autoparts2[-t_index,]
head(train)
install.packages("nnet")
#install.packages("nnet")
library(nnet)
m<-multinom(g_class~fix_time+a_speed+b_speed+separation+sPseparation+rate_terms+mpa+load_time+highpressure_time,data=train)
m<-multinom(g_class~fix_time+a_speed+b_speed+separation+spseparation+rate_terms+mpa+load_time+highpressure_time,data=train)
m<-multinom(g_class~fix_time+a_speed+b_speed+separation+s_separation+rate_terms+mpa+load_time+highpressure_time,data=train)
summary(m)
head(m$fitted.values)
yhat_test<-predict(m,test)
table<-table(real=test$g_class,predict=yhat_test)
table
(table[1,1]+table[2,2]+table[3,3])/sum(table)
OCCUPANCY.TEST<-read.csv("occupancy_test.csv",sep = ",",header = T,stringsAsFactors = F)
OCCUPANCH.TRAIN<-read.csv("occupancy_train.csv",sep=",",header=T,stringsAsFactors = F)
head(OCCUPANCH.TRAIN)
head(OCCUPANCY.TEST)
OCCUPANCY.ALL<-read.csv("occupancy_all.csv",sep=",",header=T,stringsAsFactors = F)
OCCUPANCY.TEST<-read.csv("occupancy_test.csv",sep = ",",header = T,stringsAsFactors = F)
OCCUPANCY.TRAIN<-read.csv("occupancy_train.csv",sep=",",header=T,stringsAsFactors = F)
head(OCCUPANCY.ALL)
head(OCCUPANCY.TRAIN)
head(OCCUPANCY.TEST)
head(OCCUPANCY.ALL)
head(OCCUPANCY.TRAIN)
head(OCCUPANCY.TEST)
nrow(OCCUPANCY.ALL)
nrow(OCCUPANCH.TRAIN)
nrow(OCCUPANCY.TEST)
str(OCCUPANCY.ALL$Occupancy)
xmat<-as.matrix(OCCUPANCY.ALL[1:6])
yvec<-OCCUPANCY.ALL$Occupancy
library(glmnet)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
library(glmnet)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
xmat<-as.matrix(OCCUPANCY.ALL[1:6])
yvec<-OCCUPANCY.ALL$Occupancy
OCCUPANCY.ALL
is.na(OCCUPANCY.ALL)
sum(is.na(OCCUPANCY.ALL))
xmat<-as.matrix(OCCUPANCY.ALL[1:6])
yvec<-OCCUPANCY.ALL$Occupancy
library(glmnet)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=50)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
xmat<-as.matrix(OCCUPANCY.ALL[1:6])
yvec<-OCCUPANCY.ALL$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
xmat<-as.matrix(OCCUPANCY.TRAIN[1:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda = 100)
xmat<-as.matrix(OCCUPANCY.TRAIN[1:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
xmat<-as.matrix(~.,OCCUPANCY.TRAIN[1:6])
xmat<-as.matrix(OCCUPANCY.TRAIN[1:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100)
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100,family="binomial")
OCCUPANCY.ALL<-read.csv("occupancy_all.csv",sep=",",header=T,stringsAsFactors = F)
OCCUPANCY.TEST<-read.csv("occupancy_test.csv",sep = ",",header = T,stringsAsFactors = F)
OCCUPANCY.TRAIN<-read.csv("occupancy_train.csv",sep=",",header=T,stringsAsFactors = F)
nrow(OCCUPANCY.ALL)
nrow(OCCUPANCH.TRAIN)
nrow(OCCUPANCY.TEST)
str(OCCUPANCY.ALL$Occupancy)
xmat<-as.matrix(OCCUPANCY.TRAIN[1:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100,family="binomial")
OCCUPANCY.ALL<-read.csv("occupancy_all.csv",sep=",",header=T,stringsAsFactors = F)
OCCUPANCY.TEST<-read.csv("occupancy_test.csv",sep = ",",header = T,stringsAsFactors = F)
OCCUPANCY.TRAIN<-read.csv("occupancy_train.csv",sep=",",header=T,stringsAsFactors = F)
nrow(OCCUPANCY.ALL)
nrow(OCCUPANCY.TRAIN)
nrow(OCCUPANCY.TEST)
xmat<-as.matrix(OCCUPANCY.TRAIN[1:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100,family="binomial")
OCCUPANCY.ALL<-read.csv("occupancy_all.csv",sep=",",header=T,stringsAsFactors = F)
OCCUPANCY.TEST<-read.csv("occupancy_test.csv",sep = ",",header = T,stringsAsFactors = F)
OCCUPANCY.TRAIN<-read.csv("occupancy_train.csv",sep=",",header=T,stringsAsFactors = F)
nrow(OCCUPANCY.ALL)
nrow(OCCUPANCY.TRAIN)
nrow(OCCUPANCY.TEST)
str(OCCUPANCY.ALL$Occupancy)
xmat<-as.matrix(OCCUPANCY.TRAIN[2:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100,family="binomial")
fit.lasso.cv<-cv.glmnet(x=xmat,y=yvec,nfolds=10,alpha=1,lambda=fit.lasso$lambda)
plot(fit.lasso.cv)
fit.lasso.param<-fit.lasso.cv$lambda.min
fit.lasso.tune<-glmnet(x=xmat,y=yvec,alpha=1,lambda = fit.lasso.param)
coef(fit.lasso.tune)
fit.lasso.cv<-cv.glmnet(x=xmat,y=yvec,nfolds=10,alpha=1,lambda=fit.lasso$lambda,family="binomial")
OCCUPANCY.ALL<-read.csv("occupancy_all.csv",sep=",",header=T,stringsAsFactors = F)
OCCUPANCY.TEST<-read.csv("occupancy_test.csv",sep = ",",header = T,stringsAsFactors = F)
OCCUPANCY.TRAIN<-read.csv("occupancy_train.csv",sep=",",header=T,stringsAsFactors = F)
nrow(OCCUPANCY.ALL)
nrow(OCCUPANCY.TRAIN)
nrow(OCCUPANCY.TEST)
str(OCCUPANCY.ALL$Occupancy)
xmat<-as.matrix(OCCUPANCY.TRAIN[2:6])
yvec<-OCCUPANCY.TRAIN$Occupancy
fit.lasso<-glmnet(x=xmat,y=yvec,alpha=1,nlambda=100,family="binomial")
fit.lasso.cv<-cv.glmnet(x=xmat,y=yvec,nfolds=10,alpha=1,lambda=fit.lasso$lambda,family="binomial")
plot(fit.lasso.cv)
fit.lasso.param<-fit.lasso.cv$lambda.min
fit.lasso.tune<-glmnet(x=xmat,y=yvec,alpha=1,lambda = fit.lasso.param,family = "binomial")
coef(fit.lasso.tune)
OCCUPANCH.TRAIN$Occupancy<-as.factor(OCCUPANCY.TRAIN$Occupancy)
table(OCCUPANCY.TRAIN$Occupancy)
# 0은 6414 1은 1729
m<-glm(Occupancy~Temperature+Light+CO2+HumidityRatio,data=OCCUPANCH.TRAIN,family = binomial(logit))
summary(m)
m$fitted.values
yhat<-ifelse(m$fitted.values>=0.5,1,0)
yhat
table<-table(real=OCCUPANCH.TRAIN$Occupancy,predict=yhat)
table
yhat_test<-predict(m,OCCUPANCY.TEST,type="response")
head(yhat_test,n=20)
ROC(test=yhat_test,stat=OCCUPANCY.TEST$Occupancy,plot="ROC",AUC=T,main="LOGISTICS rEGRESSION")
ROC(test=yhat_test,stat=OCCUPANCY.TEST$Occupancy,plot="ROC",AUC=T,main="LOGISTICS REGRESSION")
m<-svm(Occupancy~Temperature+Light+CO2+HumidityRatio,data=OCCUPANCH.TRAIN,cost=10,kernel="linear")
yhat_test<-predict(m,OCCUPANCY.TEST)
table<-table(real=OCCUPANCY.TEST$Occupancy,predict=yhat_test)
table
(table[1,1]+table[2,2])/sum(table)
ROC(test=yhat_test,stat=OCCUPANCY.TEST$Occupancy,PLOT="ROC",AUC=T,main="SVM")
ROC(test=yhat_test,stat=OCCUPANCY.TEST$Occupancy,plot="ROC",AUC=T,main="SVM")
