# testdata2=read.csv("train.csv",sep="\t",header=T,stringsAsFactors = F)
# #testdata2
# selected2=data.frame(testdata2$Pclass,testdata2$Sex,testdata2$Age,testdata2$SibSp,testdata2$Parch,testdata2$Fare,testdata2$Embarked)
# #selected2
#
# all_data=rbind(selected1,selected2)
# all_data
#
# summary(all_data)
#
train=read.csv("train.csv",sep="\t",header=T,stringsAsFactors = T)
train
# testdata2=read.csv("train.csv",sep="\t",header=T,stringsAsFactors = F)
# #testdata2
# selected2=data.frame(testdata2$Pclass,testdata2$Sex,testdata2$Age,testdata2$SibSp,testdata2$Parch,testdata2$Fare,testdata2$Embarked)
# #selected2
#
# all_data=rbind(selected1,selected2)
# all_data
#
# summary(all_data)
#
train=read.csv("train.csv",sep=",",header=T,stringsAsFactors = T)
train
selected=with(train,cbind(Pclass,Sex,Age,SibSp,Parch,Fare,Embarked))
test=read.csv("test.csv",sep=",",header=T,stringsAsFactors = T)
selected_test=with(test,cbind(Pclass,Sex,Age,SibSp,Parch,Fare,Embarked))
d1=data.frame(selected)
d2=data.frame(selected_test)
all_data=rbind(d1,d2)
all_data
summary(all_data)
summaryBy(-Sex~,all_data)
summaryBy(~Sex,all_data)
summaryBy(all_data)
summaryBy(Sex~,all_data)
summaryBy(Pclass~Sex,all_data)
summary(all_data)
selected<-data.frame(train$Pclass,train$SibSp,train$Sex,train$Parch,train$Fare,train$Age,
train$Embarked)
str(selected)
colnames(selected)<-c("Pclass","SibSp","Sex","Parch","Fare","Age","Embarked")
selected_test<-data.frame(test$Pclass,test$SibSp,test$Sex,test$Parch,test$Fare,test$Age,
test$Embarked)
str(selected_test)
colnames(selected_test)<-c("Pclass","SibSp","Sex","Parch","Fare","Age","Embarked")
which(is.na(selected))
all_data<-rbind(selected,selected
all_data
all_data<-rbind(selected,selected)
all_data
summary(all_data)
#selected 데이터의 na 인덱스를 반환합니다.
which(is.na(selected))
all_data<-rbind(selected,selected_test)
all_data
summary(all_data)
all_data<-rbind(selected,selected_test)
all_data
mtcars
sort(mtcars$hp,decreasing = T)
sort(mtcars$hp,decreasing = F)
order(sort(mtcars$hp,decreasing = F))
idx=order(sort(mtcars$hp,decreasing = F))
idx(1:5)
idx[1:5]
mtcars[order(sort(mtcars$hp,decreasing = F))]
mtcars[order(sort(mtcars$hp,decreasing = F))]
mtcars
sort(mtcars$hp,decreasing = T)
sort(mtcars$hp,decreasing = f)
sort(mtcars$hp,decreasing = F)
order(mtcars$hp,decreasing = F)
index=order(mtcars$hp,decreasing = F)
mtcars[index]
index=order(mtcars$hp,decreasing = F)
index
mtcars[index]
mtcars[index,]
mtcars[1:5,]
mtcars[index,]
mtcars[index:5,]
mtcars[index,]
mtcars[1:5,]
idex[1:5,]
index[1:5,]
within(order(mtcars$hp,decreasing = F))
index
within(mtcars,order(mtcars$hp,decreasing = F))
within(mtcars,sort(mtcars$hp,decreasing = F))
mtcars
within(mtcars,sort(mtcars$hp,decreasing = F))
mtcars
mtcars[sort(mtcars$hp,decreasing = F)]
mtcars[order(mtcars$hp,decreasing = F)]
mtcars[order(mtcars$hp,decreasing = F),]
mtcars[order(mtcars$hp,decreasing = T),]
order(mtcars$hp)
i<-order(mtcars$hp)
i
mtcars$hp[i]
index<-order(mtcars$hp,decreasing = T)
index
for (i in index){
mtcars$hp[i]
}
index
for (i in index){
mtcars$hp[i]
}
mtcars
mtcars$hp[i,]
mtcars$hp[i]
mtcars$hp[i]
for (i in index){
mtcars$hp[i]
}
mtcars
mtcars
sort(mtcars$hp,decreasing = T)
mtcars[sort(mtcars$hp,decreasing = T),]
str(mtcars)
sort(mtcars$hp,decreasing = T)
sort(mtcars$mpg,decreasing = F)
within(mtcars,sort(mtcars$hp))
within(mtcars,plus<-sort(mtcars$hp))
within(mtcars,plus<-sort(mtcars$hp,decreasing = T))
within(mtcars,HP_plus<-sort(mtcars$hp,decreasing = T))
rev.mtcars=t(mtcars)
final.rev.mtcars=as.data.frame(rev.mtcars)
mm=rbind(mtcars$cyl,mtcars$gear)
tt=t(mm)
tt=as.data.frame(tt)
ll=as.data.frame(tt)
ll=lapply(tt$V1+tt$V2,sum)
ll=as.data.frame(ll)
save=c()
k=1
k=k+i
names(final.rev.mtcars[save[]])
names(final.rev.mtcars[save[]])
rev.mtcars=t(mtcars)
final.rev.mtcars=as.data.frame(rev.mtcars)
mm=rbind(mtcars$cyl,mtcars$gear)
tt=t(mm)
tt=as.data.frame(tt)
ll=as.data.frame(tt)
ll=lapply(tt$V1+tt$V2,sum)
ll=as.data.frame(ll)
save=c()
k=1
for (i in 1:32){
if(ll[i]==max(ll)){
save[k]=i
k=k+i
}
}
names(final.rev.mtcars[save[]])
#-----------------------------------------------------------
강원<-c(200,500,400)
경남<-c(400,300,500)
충북<-c(600,300,400)
sales<-data.frame(강원,경남,충북북)
sales<-data.frame(강원,경남,충북)
sales<-stack(sales); sales
summaryBy(values~ind,sales)
sales<-unstack(sales,values~ind)
sales
sales<-data.frame(강원,경남,충북)
sales<-stack(sales); sales
sales
sales<-data.frame(강원,경남,충북)
sales
sales<-stack(sales); sales
# values의 값을 ind로 summary한다.
summaryBy(values~ind,sales)
# unstack을 하게 되면 다시 분석 할 수 없는 테이블로 만든다.
sales<-unstack(sales,values~ind)
sales
library(reshape2)
sales<-data.frame(강원,경남,충북)
sales<-melt(sales); sales
summaryBy(value~variable,sales)
sales<-dcast(sales,value~variable);
sales
sales<-acast(sales,value~variable); sales
sales<-acast(sales,value~variable)
summaryBy(value~variable,sales)
sales<-dcast(sales,value~variable);
sales<-data.frame(강원,경남,충북)
sales<-melt(sales); sales
summaryBy(value~variable,sales)
sales<-dcast(sales,value~variable);
sales
sales<-acast(sales,value~variable)
sales<-acast(sales,value~variable); sales
sales<-acast(sales,value~variable);
sales<-acast(sales,value~variable);
sales<-dcast(sales,value~variable);
sales
sales<-data.frame(강원,경남,충북)
sales<-melt(sales); sales
summaryBy(value~variable,sales)
sales<-data.frame(강원,경남,충북)
library(reshape2)
sales<-melt(sales); sales
summaryBy(value~variable,sales)
sales<-dcast(sales,value~variable);
sales
head(french_fries)
head(melt(french_fries,id.vars=1:4))
head(melt(french_fries,id.vars=1:4,na.rm=TRUE))
?melt()
#----------------------연습문제---------
Apple<-c(6,10,13)
Banana<-c(2,8,10)
Peach<-c(7,3,5)
Berry<-c(8,15,11)
Year<-c*2000,2001,2002
Year<-c(2000,2001,2002)
Fruit<-data.frame(Apple,Banana,Peach,Berry,Year)
Fruit
Fruit<-stack(Fruit)
Fruit
summaryBy(values~ind,Fruit)
# year은 제외해야한다.
summaryBy(values~ind[1:12],Fruit)
# year은 제외해야한다.
summaryBy(values~ind[1:11],Fruit)
Fruit
Fruit[1:12,]
Fruit<-stack(Fruit[1:12])
Fruit=Fruit[1:12,]
Fruit<-stack(Fruit)
Fruit=Fruit[1:12,]
Fruit
Fruit<-stack(Fruit)
Fruit
# year은 제외해야한다.
summaryBy(values~ind,Fruit)
# year은 제외해야한다.
summaryBy(values~ind,Fruit)
Fruit<-data.frame(Apple,Banana,Peach,Berry,Year)
Fruit<-stack(Fruit)
Fruit
str(Fruit)
#str(Fruit)
# year은 제외해야한다.
summaryBy(values~ind,Fruit)
#str(Fruit)
# year은 제외해야한다.
summaryBy(values[1:12]~ind,Fruit)
#str(Fruit)
# year은 제외해야한다.
summaryBy(values~ind,Fruit)
Fruit<-data.frame(Apple,Banana,Peach,Berry,Year)
Fruit
melt(Fruit,id.vars=1:4)
melt(Fruit,id.vars=1:4,na.rm=TRUE)
melt(Fruit,id.vars=1:4)
summary(melt(Fruit,id.vars=1:4))
summary(melt(Fruit,id.vars=1:4))
Fruit<-dcast(Fruit)
Fruit<-dcast(Fruit,value~variable)
#----------------------연습문제---------
Apple<-c(6,10,13)
Banana<-c(2,8,10)
Peach<-c(7,3,5)
Berry<-c(8,15,11)
Year<-c(2000,2001,2002)
Fruit<-data.frame(Apple,Banana,Peach,Berry,Year)
Fruit<-stack(Fruit)
Fruit
#str(Fruit)
# year은 제외해야한다.
summaryBy(values~ind,Fruit)
Fruit
summary(melt(Fruit,id.vars=1:4))
summary(melt(Fruit,id.vars=1:4),na.rm=TRUE)
summary(melt(Fruit,id.vars=1:4))
name<-c("James","Mary","Kevin")
age<-c(22,23,24)
df<-data.frame(name,age)
df
library(data.table)
name<-c("James","Mary","Kevin")
age<-c(22,23,24)
dt<-data.table(name,age)
dt
iris.dt<-as.data.table(iris)
iris.dt
class(dt)
class(df)
str(dt)
str(df)
iris.dt<-as.data.table(iris);
iris.dt
iris.dt[1,]
iris.dt[,1]
iris.dt[.Sepal.Length]
iris.dt[,Sepal.Length]
# 데이터 테이블로 결과를 산출합니다.
iris.dt[,"Sepal.Length"]
iris.dt[,"Sepal.Width"]
iris.dt[5:10,"Sepal.Width"]
iris.dt[,"Sepal.Width"]
iris.dt[,c(Sepal.Length,Petal.Length)]
iris.dt[,c("Sepal.Length","Petal.Length")]
iris.dt[1,Species]
iris.dt[1,"Species"]
iris.dt[1,c(Sepal.Length,Sepal.Width,Species)]
iris.dt[1,c("Sepal.Length","Sepal.Width","Species")]
iris.dt[iris.dt$Petal.Length>1.5]
iris.dt[Petal.Length>1.5]
aggregate(Sepal.Width~Species,iris.dt,mean)
tapply(iris.dt$Sepal.Length,iris.dt$Species,mean)
iris.dt[,mean(Sepal.Length),by=Species]
iris.dt[,list(my.length=mean(Sepal.Length)),by=Species]
View(tt)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
iris
head(iris)
dim(iris)
iris %>% head() %>%dim()
iris %>% head() %>% dim()
iris
x<-c(1,2,3,4,5)
x2<-as.data.frame(x)
class(x2)
iris
head(iris)
dim(iris)
iris %>% head() %>% dim()
iris %>% head()
x<-c(1,2,3,4,5)
class(as.data.frame(x))
x<-c(1,2,3,4,5)
x%>%as.data.frame()%>%class()
x %>% as.data.frame() %>% class()
iris[,c("Sepal.Length","Species")]
select(iris,Sepal.Length,Species)
iris %>% select(Sepal.Length,Species)
class(iris)
iris %>% filter(Species=="setosa")
ifis %>% filter(Sepal.Length<5.0)
iris %>% filter(Sepal.Length<5.0)
iris %>% filter(Species=="setosa" & Sepal.Length<5.0)
with(iris,mean(Sepal.Length))
summarize(iris,mean(Sepal.Length))
summarize(iris,Sepal.Avg=mean(Sepal.Length))
summarize(iris,mean(Sepal.Length))
summarize(iris,Sepal.Avg=mean(Sepal.Length))
iris %>% summarize(Sepal.Avg=mean(Sepal.Length))
iris %>% group_by(Species) %>% summarize(Sepal.Avg=mean(Sepal.Length))
iris %>% summarize(Sepal.Avg=mean(Sepal.Length)) %>% group_by(Species)
iris %>% summarize(Sepal.Avg=mean(Sepal.Length)) %>% group_by(Species)
iris %>% group_by(Species) %>% summarize(Sepal.Avg=mean(Sepal.Length))
tapply(iris$Sepal.Length,iris$Species,mean)
?tapply
x=c(1,7,5,9,3)
sort(x)
order(x)
sort(x,decreasing=TRUE)
order(x,decreasing = T)
iris[order(iris$Sepal.Length),]
iris %>% arrange(Sepal.Length)
head(iris %>% arrange(Sepal.Length))
head(iris[order(iris$Sepal.Length),])
read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
str(PRACTICE)
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
str(PRACTICE)
PRACTICE
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE
str(PRACTICE)
PRACTICE %>% filter(outcome==1)
PRACTICE %>% filter(outcome==1) %>% mean(BMI)
PRACTICE %>% filter(outcome==1) %>% mean(BMI,na.rm=T)
PRACTICE %>% filter(outcome==1) %>% mean(PRACTICE$BMI,na.rm=T)
str(PRACTICE)
mean(PRACTICE$BMI)
PRACTICE %>% filter(outcome==1) %>% mean(PRACTICE$BMI)
PRACTICE1=PRACTICE %>% filter(outcome==1)
PRACTICE1
PRACTICE1 %>% mean(PRACTICE1$BMI)
PRACTICE1 %>% mean(PRACTICE1$BMI,na.rm=T)
PRACTICE1=PRACTICE %>% filter(outcome==1)
PRACTICE1=PRACTICE %>% filter(outcome==1)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% mean(BMI)
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% mean()
PRACTICE1=PRACTICE %>% filter(outcome==1)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% mean()
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% mean
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% sum(PRACTICE$BMI)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) #%>% sum(PRACTICE$BMI)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% sum(PRACTICE$BMI)/111
PRACTICE1
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE
str(PRACTICE)
mean(PRACTICE$BMI)
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% sum(PRACTICE$BMI)/111
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% mean()
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% mean(PRACTICE$BMI)
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% summarize(평균=mean(BMI))
PRACTICE1
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% summarize(BMI평균=mean(BMI))
PRACTICE1
PRACTICE %>% group_by(outcome)
PRACTICE %>% group_by(outcome)# %>% summarize(ifelse(outcome==1),)
PRACTICE %>% group_by(outcome) %>% summarize(수축기)
PRACTICE %>% group_by(outcome) %>% summarize(수축기평균=mean(수축기기))
PRACTICE %>% group_by(outcome) %>% summarize(수축기평균=mean(수축기))
PRACTICE %>% group_by(outcome) %>% summarize(수축기평균=mean(이완기기))
PRACTICE %>% group_by(outcome) %>% summarize(수축기평균=mean(이완기))
order(PRACTICE$BMI)
order(PRACTICE$BMI,decreasing = F)
order(PRACTICE$BMI,decreasing = T)
PRACTICE[order(PRACTICE$BMI),]
PRACTICE[order(PRACTICE$BMI),] %>% PRACTICE[1,1]
PRACTICE[order(PRACTICE$BMI,decreasing = T),] %>%
PRACTICE[order(PRACTICE$BMI,decreasing = T),]
PRACTICE[order(PRACTICE$BMI),]
PRACTICE[order(PRACTICE$BMI,decreasing = TRUE),]
PRACTICE[order(PRACTICE$BMI,decreasing = TRUE),]
PRACTICE[order(PRACTICE$BMI,decreasing = FALSE),]
PRACTICE[sort(PRACTICE$BMI,decreasing = TRUE),]
#PRACTICE[sort(PRACTICE$BMI,decreasing = TRUE),]
sort(PRACTICE,decreasing = T)
#PRACTICE[sort(PRACTICE$BMI,decreasing = TRUE),]
sort(PRACTICE$BMI,decreasing = T)
order(PRACTICE$BMI,decreasing = T)
str(order(PRACTICE$BMI,decreasing = T))
#str(order(PRACTICE$BMI,decreasing = T))
PRACTICE[1]
#str(order(PRACTICE$BMI,decreasing = T))
PRACTICE[order(PRACTICE$BMI,decreasing = T)]
#str(order(PRACTICE$BMI,decreasing = T))
PRACTICE[order(PRACTICE$BMI,decreasing = T),]
PRACTICE %>% sort(PRACTICE%BMI,decreasing=T) %>% order(PRACTICE$BMI,decreasing = T)
PRACTICE %>% sort(PRACTICE$BMI,decreasing=T) %>% order(PRACTICE$BMI,decreasing = T)
PRACTICE %>% sort(PRACTICE$BMI,decreasing=T) %>% order(decreasing = T)
PRACTICE %>% sort(PRACTICE$BMI,decreasing=T) %>% order(,decreasing = T)
#PRACTICE[sort(PRACTICE$BMI,decreasing = TRUE),]
sort(PRACTICE$BMI,decreasing = T)
order(PRACTICE$BMI,decreasing = T)
#str(order(PRACTICE$BMI,decreasing = T))
PRACTICE[order(PRACTICE$BMI,decreasing = T),]
#str(order(PRACTICE$BMI,decreasing = T))
head(PRACTICE[order(PRACTICE$BMI,decreasing = T),])
# 데이터셋을 데이터 테이블로 변환
PRACTICE_table=as.data.table(PRACTICE)
# 데이터셋을 데이터 테이블로 변환
PRACTICE_table=data.table(PRACTICE)
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE
# 데이터셋을 데이터 테이블로 변환
PRACTICE_table=data.table(PRACTICE)
# 데이터셋을 데이터 테이블로 변환
PRACTICE_table<-data.table(PRACTICE)
# 데이터셋을 데이터 테이블로 변환
PRACTICE_table=as.data.table(PRACTICE)
# 데이터셋을 데이터 테이블로 변환
#PRACTICE_table=as.data.table(PRACTICE)
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE.dt<-as.data.table(PRACTICE)
# 데이터셋을 데이터 테이블로 변환
#PRACTICE_table=as.data.table(PRACTICE)
library(data.table)
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE.dt<-as.data.table(PRACTICE)
PRACTICE.dt
PRACTICE.dt[,100]
PRACTICE.dt[100,]
PRACTICE.dt[,mean(인슐린),by=outcome]
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE
str(PRACTICE)
mean(PRACTICE$BMI)
PRACTICE1=PRACTICE %>% filter(outcome==1 & BMI) %>% summarize(BMI평균=mean(BMI))
PRACTICE1
PRACTICE %>% group_by(outcome) %>% summarize(수축기평균=mean(수축기))
PRACTICE %>% group_by(outcome) %>% summarize(수축기평균=mean(이완기))
#PRACTICE[sort(PRACTICE$BMI,decreasing = TRUE),]
sort(PRACTICE$BMI,decreasing = T)
order(PRACTICE$BMI,decreasing = T)
#str(order(PRACTICE$BMI,decreasing = T))
head(PRACTICE[order(PRACTICE$BMI,decreasing = T),])
# 데이터셋을 데이터 테이블로 변환
#PRACTICE_table=as.data.table(PRACTICE)
library(data.table)
PRACTICE=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = F)
PRACTICE.dt<-as.data.table(PRACTICE)
PRACTICE.dt
PRACTICE.dt[100,]
PRACTICE.dt[,mean(인슐린),by=outcome]
