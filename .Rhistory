3+4
16*25+186*5-67*22
2+5
456-123
2*(3+4)
(3+5*6)/7
(7-4)*3
2^10+3^5
1256%7
184%5
1976/24
16*25+186*5-67*22
1256%%7
184%%5
a=3
b=3
a+b
a=3
b=3
a=b
print("Hello World!")
#print("Hello World!")
?print
#print("Hello World!")
?seq
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library("randomFroest")
library("randomForest")
library("randomForest")
#install.packages("randomForest")
#library("randomForest")
2+3
?
x+y
x+y
x+y
x+y
y<-3
x+y
#install.packages("randomForest")
#library("randomForest")
x<-3
y<-3
x+y
x=c(1,2,3,4,5)
x[2]
x[4]=0
x
c(x,4)
test
test=list("kim",c(64,82,92),c(T,F,T))
test
son=list(son.name=c("Minsu","Minchul"),son.gender=c("Male","Male"),son.age=c(2,6))
son
x=matrix(c(1,2,3,4),nrow=2,ncol=2)
x
x=matrix(c(1,2,3,4))
y=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
X
x=matrix(c(1,2,3,4))
x=matrix(c(1,2,3,4))
y=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
x
y
2+3
?
?
?
?
?
?
?
2+3
x=2
y=3
x+y
x+y
x=2
y=3
x+y
x=2
y=3
x+y
2+2
2+2
2-2
2
2
2+2
2-2
2*2
2/2
2%%2
3/2
3%/%2
2^3
2**3
2^32
2^128
print("The end...")
sum(2,5)
sum<-function(x,y){
return (x+y)
}
sum(2,5)
print("Hi function!")
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
sum(x,y){
print("Hi function!")
return (x+y)
}
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
return print("Hi end")
return print("Hi end")
print("Hi end")
return (x+y)
sum<-function(x,y){
print("Hi function!")
if (x>y)
print("Hi end")
return (x+y)
}
sum(2,5)
print("Hi end")
if (x>y){
print("Hi end")
}
return (x+y)
sum<-function(x,y){
print("Hi function!")
if (x>y){
print("Hi end")
}
return (x+y)
}
sum(2,5)
print("Hi function!")
return (x+y)
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
print("I want to go My Home.. plz")
return (x+y)
sum<-function(x,y){
print("Hi function!")
print("I want to go My Home.. plz")
return (x+y)
}
sum(2,5)
?if
sum(2,5)
sum(2,5)
sum(2,5)
getwd()
read.excel("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.table("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringAsfactor=F)
?read.csv
read.csv("Order1501.csv",sep=",",header=T,stringAsFactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
DATA
str(DATA)
library(dplyr)
DATA[,-c(12,13,16)]
DATA[,-c(12,13,16)]
DATA=DATA[,-c(12,13,16)]
DATA
DATA %>% filter(ItemType=="TAN")
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA %>% filter(is.na(CancelCode))
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA=DATA %>% filter(is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# data.frame의 형태이고, 총 266298개의 행을 가지며 17개의 독립변수가 존재
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
# 2. itemtype에서 TAN만 고려한다.
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA=DATA %>% filter(is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
str(DATA)
library(dplyr)
library(stringr)
setwd("D:/BigDataCampus")
R_wiki<-readline("R_wiki.txt")
R_wiki<-readlines("R_wiki.txt")
R_wiki<-readlines("R_wiki.txt")
R_wiki<-readLines("R_wiki.txt")
R_wiki<-readlines("R_wiki.txt")
R_wiki<-readLines("R_wiki.txt")
R_wiki<-readline("R_wiki.txt",header=T)
R_wiki<-readline("R_wiki.txt")
R_wiki[1]
R_wiki[2]
R_wiki[3]
R_wiki<-read.table("R_wiki.txt")
library(dplyr)
library(stringr)
setwd("D:/BigDataCampus")
R.wiki<-readLines("R_wiki.txt")
R.wiki
str_extract_all(R.wiki,"^[A-Z]")
str_extract_all(R.wiki,"^[A-Z][[:alpha:]]")
grep("^[A-Z]",R.wiki,vaule=T)
grep("^[A-Z]",R.wiki,vaule=TRUE)
grep("^[A-Z]",R.wiki,value=TRUE)
str_extract_all("[[:upper:]]")
str_extract_all(R.wiki,"[[:upper:]]")
str_extract_all(R.wiki,"[[:upper:]]\\b")
str_split(R.wiki,"^[A-Z]")
str_split_all(R.wiki,"^[A-Z]")
str_split_all(R.wiki,"^[A-Z]\\w")
str_extract_all(R.wiki,"^[A-Z]\\w")
str_extract_all(R.wiki,"[[:upper:]]\\w")
R.wiki<-readLines("R_wiki.txt")
R.wiki
str_extract_all(R.wiki,"[[:upper:]]\\w")
str_extract_all(R.wiki,"[[:upper:]]\\S")
str_extract_all(R.wiki,"[[:upper:]]\\s")
str_extract_all(R.wiki,"[[:upper:]]\\W")
str_extract_all(R.wiki,"[[:upper:]]")
str_extract_all(R.wiki,"^[[:upper:]]")
word<-str_split(R.wiki," ")
word
str_extract_all(word,"^[A-Z]")
str_extract_all(word,"^[A-Z]",simplify = T)
str_extract_all("^[A-Z]")
str_extract_all(word,"[[:upper:]]")
str_extract_all(word,"^[A-Z]+")
str_extract_all(word,"^[A-Z]+")
R.wiki
word<-str_split(R.wiki," ")
word
grep("^[A-Z]",word,value = T)
grep("^[A-Z]",word[1],value = T)
grep("^[A-Z]")
grep("^[A-Z]",word)
class(word)
word<-as.vector(word)
grep("^[A-Z]",word)
grep("^[A-Z]",word,value=T)
R.wiki<-readLines("R_wiki.txt")
R.wiki
word<-str_split(R.wiki," ")
str_extract_all(word,"^([A-Z])[[:alpha:]]")
str_extract_all(word,"^([A-Z])[[:alpha:]]")
word<-str_split(R.wiki," ")
word
str_extract_all(word,"(^[A-Z])[[:alpha:]]*")
word<-as.vector(word)
word
word<-str_split(R.wiki," ")
word<-unlist(word)
word
str_extract_all(word,"(^[A-Z])[[:alpha:]]*")
sum(table(grep("ORA",R.wiki[[1]])))
word2<-str_split(R.wiki," ")
word2[[1]]
sum(table(word2[[1]]))
sum(table(word2[[2]]))
R.wiki<-readLines("R_wiki.txt")
R.wiki
word<-str_split(R.wiki," ")
word<-unlist(word)
str_extract_all(word,"(^[A-Z])[[:alpha:]]*")
str_extract_all(word,"(^[A-Z])[[:alpha:]]*",value=T)
upper.word<-str_extract_all(word,"(^[A-Z])[[:alpha:]]*")
upper.word
str(R.wiki)
str(R.wiki[1])
str_locate(R.wiki[1],"(^[A-Z])[[:alpha:]]*")
str_locate_all(R.wiki[1],"(^[A-Z])[[:alpha:]]*")
str_locate_all(R.wiki[1],"(^[A-Z])[[:alpha:]]+")
str_locate_all(R.wiki[1],"(^[A-Z])[[:alpha:]]*")
str_locate_all(R.wiki[1],"^[A-Z]")
str_locate_all(R.wiki[1],"^[A-Z]*\\B")
str_locate_all(R.wiki[1],"^[A-Z]*\\b")
str_locate_all(R.wiki[1],"(^[A-Z])[[:alpha:]]*//s")
str_locate_all(R.wiki[1],"(^[A-Z])[[:alpha:]]*\\s")
str_locate_all(R.wiki,"(^[A-Z])[[:alpha:]]*\\s")
str_locate_all(R.wiki,"(^[A-Z])[[:alpha:]]*\\w")
str_locate_all(R.wiki,"(^[A-Z])[[:alpha:]]*")
str_locate_all(R.wiki,"([A-Z])[[:alpha:]]*")
R.wiki
upper.word<-str_extract_all(word,"([A-Z])[[:alpha:]]*")
upper.word
upper.word<-unlist(upper.word)
upper.word
R.wiki<-readLines("R_wiki.txt")
# word<-str_split(R.wiki," ")
# word<-unlist(word)
upper.word<-str_extract_all(word,"([A-Z])[[:alpha:]]*")
upper.word<-unlist(upper.word)
upper.word
str_locate_all(R.wiki,"([A-Z])[[:alpha:]]*")
