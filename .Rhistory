2+3
?
x+y
x+y
x+y
x+y
y<-3
x+y
#install.packages("randomForest")
#library("randomForest")
x<-3
y<-3
x+y
x=c(1,2,3,4,5)
x[2]
x[4]=0
x
c(x,4)
test
test=list("kim",c(64,82,92),c(T,F,T))
test
son=list(son.name=c("Minsu","Minchul"),son.gender=c("Male","Male"),son.age=c(2,6))
son
x=matrix(c(1,2,3,4),nrow=2,ncol=2)
x
x=matrix(c(1,2,3,4))
y=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
X
x=matrix(c(1,2,3,4))
x=matrix(c(1,2,3,4))
y=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
x
y
2+3
?
?
?
?
?
?
?
2+3
x=2
y=3
x+y
x+y
x=2
y=3
x+y
x=2
y=3
x+y
2+2
2+2
2-2
2
2
2+2
2-2
2*2
2/2
2%%2
3/2
3%/%2
2^3
2**3
2^32
2^128
print("The end...")
sum(2,5)
sum<-function(x,y){
return (x+y)
}
sum(2,5)
print("Hi function!")
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
sum(x,y){
print("Hi function!")
return (x+y)
}
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
return print("Hi end")
return print("Hi end")
print("Hi end")
return (x+y)
sum<-function(x,y){
print("Hi function!")
if (x>y)
print("Hi end")
return (x+y)
}
sum(2,5)
print("Hi end")
if (x>y){
print("Hi end")
}
return (x+y)
sum<-function(x,y){
print("Hi function!")
if (x>y){
print("Hi end")
}
return (x+y)
}
sum(2,5)
print("Hi function!")
return (x+y)
sum<-function(x,y){
print("Hi function!")
return (x+y)
}
sum(2,5)
print("I want to go My Home.. plz")
return (x+y)
sum<-function(x,y){
print("Hi function!")
print("I want to go My Home.. plz")
return (x+y)
}
sum(2,5)
?if
sum(2,5)
sum(2,5)
sum(2,5)
getwd()
read.excel("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.table("Order1501.xlsx",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringAsfactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringAsfactor=F)
?read.csv
read.csv("Order1501.csv",sep=",",header=T,stringAsFactor=F)
read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
DATA
str(DATA)
library(dplyr)
DATA[,-c(12,13,16)]
DATA[,-c(12,13,16)]
DATA=DATA[,-c(12,13,16)]
DATA
DATA %>% filter(ItemType=="TAN")
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA %>% filter(is.na(CancelCode))
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA=DATA %>% filter(is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# data.frame의 형태이고, 총 266298개의 행을 가지며 17개의 독립변수가 존재
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
# 2. itemtype에서 TAN만 고려한다.
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
DATA=DATA %>% filter(is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN")
DATA
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
DATA
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
str(DATA)
autoparts
library(autoparts)
autoparts=read.csv("autoparts.csv",header=TRUE)
setwd("D:/BigDataCampus")
autoparts=read.csv("autoparts.csv",header=TRUE)
autoparts=read.csv("autoparts.csv",header=TRUE)
setwd("D:/BigDataCampus")
autoparts=read.csv("autoparts.csv",header=TRUE)
autoparts1<-autoparts[autoparts$prod_no=="90784-76001",c(2:11)]
dim(autoparts1)
autoparts1
autoparts1[!complete.cases(autoparts1),]
# 행에 결측치가 있는지를 알려준다.  is.na() 와 비슷하다.
?complete.cases
is.na(autoparts1)
autoparts1[is.na(autoparts1),]
# 행에 결측치가 있는지를 알려준다.  is.na() 와 비슷하다.
#?complete.cases
autoparts1[!complete.cases(autoparts1),]
autoparts1[is.na(autoparts1),]
summary(autoparts1)
boxplot(autoparts1)
?boxplot
# summary를 boxplot으로 시각화 해서 보여줍니다.
boxplot(autoparts1)
boxplot(autoparts1$separation)
boxplot(autoparts1$rate_terms)
# 이상치를 제거합니다.
boxplot(autopart1$c_thickness)
# 이상치를 제거합니다.
boxplot(autoparts1$c_thickness)
autoparts2<-autoparts1[autoparts1$c_thickness<1000,]
dim(autoparts2)
boxplot(autoparts2$c_thickness)
dim(autoparts1)
dim(autoparts2)
boxplot(autoparts2$c_thickness)
# plot를 통해서 변수의 분포를 대략적으로 판단할 수 있습니다.
plot(autoparts2$c_thickness)
hist(autoparts2$c_thickness)
hist(autoparts2$c_thickness,breaks = 50)
hist(autoparts2$c_thickness)
hist(autoparts2$c_thickness,breaks = 100)
x<-autoparts2$c_thickness
library(moments)
skewness(x)
kurtosis(x)
plot(x)
den.norm<-function(x) dnorm(x,mean=mean(x),sd=sd(x))
curve(den.norm,col="red",add=TRUE,lty=2)
abline(v=mean(x),col="blue",lty=2)
den.norm()
den.norm
plot(x)
den.norm<-function(x) dnorm(x,mean=mean(x),sd=sd(x))
curve(den.norm,col="red",add=TRUE,lty=2)
abline(v=mean(x),col="blue",lty=2)
x
plot(density(x))
den.norm<-function(x) dnorm(x,mean=mean(x),sd=sd(x))
curve(den.norm,col="red",add=TRUE,lty=2)
abline(v=mean(x),col="blue",lty=2)
#-----------------------연습문제--------------------------
DATA=read.csv("train.csv",sep=",",header=T,stringsAsFactors = T)
head(DATA)
DATA %>% filter(Sex=="male")
library(dpylr)
library(dplyr)
DATA=read.csv("train.csv",sep=",",header=T,stringsAsFactors = T)
head(DATA)
DATA %>% filter(Sex=="male")
DATA_MALE=DATA %>% filter(Sex=="male")
DATA_FEMALE=DATA %>% filter(Sex=="female")
DATA_MALE
DATA_FEMALE
DATA_MALE
DATA_MALE_SURVIVED=DATA_MALE %>% mean(DATA_MALE$Survived)
DATA_MALE_SURVIVED=DATA_MALE %>% mean(DATA_MALE$Survived,na.rm=T)
DATA_MALE_SURVIVED=DATA_MALE %>% mean(DATA_MALE$Survived)
DATA_MALE_SURVIVED=DATA_MALE %>% mean(Survived)
DATA_MALE_SURVIVED=DATA_MALE %>% mean(Survived)
DATA_MALE_SURVIVED=mean(DATA_MALE$Survived)
DATA_MALE_SURVIVED
DATA_FEMALE_SURVIVED=mean(DATA_FEMALE$Survived)
DATA_FEMALE_SURVIVED
head(DATA)
summary(DATA)
PIMA=read.csv("pima-indians-diabetes.csv",sep=",",header=T,stringsAsFactors = T)
PIMA
str(PIMA)
summary(PIMA)
cor(DATA$Survived,DATA$Fare)
cor(DATA$Survived,DATA$Pclass)
boxplot(PIMA)
hist(PIMA)
hist(PIMA)
hist(PIMA)
hist(PIMA[,-c(6:7)])
hist(PIMA)
hist(PIMA$Pregnant)
hist(PIMA[1:5])
hist(PIMA[1:4])
hist(PIMA[1:3])
hist(PIMA[1:2])
hist(PIMA[1])
hist(PIMA)
hist(PIMA$Pregnant)
hist(PIMA$Glucose)
PIMA %>% group_by(Outcome) %>% boxplot()
# 인슐린의 이상치가 굉장히 많다.
boxplot(PIMA)
PIMA %>% group_by(Outcome) %>% boxplot()
PIMA %>% filter(Outcome==1) %>% boxplot()
PIMA %>% filter(Outcome==0) %>% boxplot()
PIMA %>% filter(Outcome==1) %>% boxplot()
PIMA %>% filter(Outcome==0) %>% boxplot()
score<-c(85,90,93,86,82)
score<-c(85,90,93,86,82)
mean(score)
median(score)
var(score)
sd(score)
키<-c(168,176,167,174,169)
몸무게<-c(52,68,47,82,51)
matrix(키,몸무게)
data.frame(키,몸무게게)
data.frame(키,몸무게)
mean(키키)
mean(키)
키_평균=mean(키)
몸무게_평균=mean(몸무게게)
몸무게_평균=mean(몸무게)
몸무게_평균=mean(몸무게)
키_평균=mean(키)
몸무게_평균=mean(몸무게)
키<-c(168,176,167,174,169)
몸무게<-c(52,68,47,82,51)
data.frame(키,몸무게)
키_평균=mean(키)
몸무게_평균=mean(몸무게)
키_평균<-mean(키)
몸무게_평균<-mean(몸무게)
몸무게_평균<-mean(몸무게)
몸무게_평균<-mean(몸무게)
키_평균<-mean(키)
몸무게_평균<-mean(몸무게)
몸무게_평균<-mean(몸무게)
height<-c(168,176,167,174,169)
KG<-c(52,68,47,82,51)
matrix(height,KG)
matrix(KG,height)
matrix(KG,height,nrow = 5,ncol=2)
result<-matrix(KG,height,nrow = 5,ncol=2)
mean(result$height)
mean(result[,1])
result<-matrix(height,KG,nrow = 5,ncol=2)
result
result<-matrix(height,nrow = 5,ncol=2)
result
result<-matrix(height,nrow = 10,ncol=2)
result
result
height<-c(168,176,167,174,169)
KG<-c(52,68,47,82,51)
result<-matrix(height,KG,nrow = 5,ncol=2)
result<-matrix(height,KG, ncol=2, nrow=5)
result
height<-matrix(168,176,167,174,169)
height<-matrix(168,176,167,174,169,ncol=2,nrow=5)
height<-matrix(168,176,167,174,169,ncol=2,nrow=5)
height<-matrix(168,176,167,174,169)
A_result<-(1200-1000)/200
B_result<-(120-100)/10
A_result<-1*10+50
A_result
height<-rnorm(n=1000000,mean=168,sd=7)
hist(height,breaks=10,probability = T)
?hist
hist(height,breaks=100,probability = T)
hist(height,breaks=1000,probability = T)
hist(height,breaks=100000,probability = T)
hist(height,breaks=1,probability = T)
hist(height,breaks=1,probability = T)
hist(height,breaks=10,probability = T)
# rnorm 100만개의 정규분포를 만든다.
height<-rnorm(n=1000000,mean=168,sd=7)
?hist
hist(height,breaks=10,probability = T)
hist(height,breaks=100,probability = T)
hist(height,breaks=10,probability = T)
hist(height,breaks=100,probability = T)
hist(height,breaks=1000,probability = T)
height<-rnorm(n=1000000,mean=168,sd=7)
hist(height,breaks=30,probability = T)
lines(density(height,bw=0.5),col="red",lwd=1)
# 중국 화창품 기업 데이터 Handling
# Goal: 19개 부총의 1월~12월까지의 매출액 분석
# Data Handling Process
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다.
# 2. itemtype에서 TAN만 고려한다.
# 3. Cancel Code가 존재하면, 해당 레코드는 제외한다.
library(dplyr)
getwd()
DATA=read.csv("Order1501.csv",sep=",",header=T,stringsAsFactors = F)
str(DATA)
# data.frame의 형태이고, 총 266298개의 행을 가지며 17개의 독립변수가 존재
# 1. dealerpriceamt, c53amt,code는 고려하지 않는다. 즉, 제거한다.
# 해당 column을 전체 삭제합니다.
DATA=DATA[,-c(12,13,16)]
str(DATA)
# 2. itemtype에서 TAN만 고려한다.
# 3. Cancel Code에서 결측치가 있는 레코드가 주요한 데이터이다.
# ItemType은 filter조건을 사용하여 TAN인 경우의 데이터만 모은다.
# 2단계 과정을 거치면 26만의 데이터에서 16만 데이터 개수로 축소
DATA=DATA %>% filter(ItemType=="TAN" & is.na(CancelCode))
str(DATA)
setwd("문서")
setwd(바탕 화면)
setwd("바탕 화면")
getwd()
# rnorm 100만개의 정규분포를 만든다.
height<-rnorm(n=1000000,mean=168,sd=7)
hist(height,breaks=1000,probability = T)
height<-rnorm(n=1000000,mean=168,sd=7)
hist(height,breaks=30,probability = T)
lines(density(height,bw=0.5),col="red",lwd=1)
# rnorm 100만개의 정규분포를 만든다.
height<-rnorm(n=1000000,mean=168,sd=7)
hist(height,breaks=1000,probability = T)
height<-rnorm(n=1000000,mean=168,sd=7)
hist(height,breaks=30,probability = T)
lines(density(height,bw=0.5),col="red",lwd=1)
getwd()
score<-read.csv("tdata.csv",header = T)
score
str(score)
resuult<-t.test(score$성적,alternative=c("greater"),mu=75)
result
result<-t.test(score$성적,alternative=c("greater"),mu=75)
result
score2<-read.csv("tdata2.csv",header=T)
score2
result.score2<-t.test(score2$성적,alternative=c("greater"),mu=75)
result.score2
fruits1<-read.csv("love_fruits.csv",header=T)
fruits1
round(prop.table(table(fruits1$선호과일))*100,2)
round(prop.table(table(fruits1$선호과일))*100,2)
table(fruits1$선호과일)
?table
count<-c(table(fruits1$선호과일))
pct<-c(round(prop.table(table(fruits1$선호과일))*100,2))
love_fruits<-data.frame(건수=count,비율=pct)
love_fruits
?prop.table
barplot(love_fruits$건수,names.arg=c("바나나","복숭아","사과","체리","포도"),ylim=c(0,15),col=rainbow(5))
pie(love_fruits$건수,col=rainbow(5),init.angle = 90,label=lab)
pie(love_fruits$건수,col=rainbow(5),init.angle = 90, labels=lab)
pie(love_fruits$건수,col=rainbow(5),init.angle = 90,label=lab)
pie(love_fruits$건수,col=rainbow(5),init.angle = 90)
legend(0.8,1,c("바나나","복숭아","사과","체리","포도"),cex=0.7,fill=rainbow(5))
barplot(love_fruits$건수,names.arg=c("바나나","복숭아","사과","체리","포도"),ylim=c(0,15),col=rainbow(5))
pie(love_fruits$건수,col=rainbow(5),init.angle = 90,label=lab)
pie(love_fruits$건수,col=rainbow(5),init.angle = 90,label=label)
pie(love_fruits$건수,col=rainbow(5),init.angle = 90,label=love_fruits$비율)
legend(0.8,1,c("바나나","복숭아","사과","체리","포도"),cex=0.7,fill=rainbow(5))
install.packages("gmodels")
library(gmodels)
study<-read.csv("pass_cross.csv",header = T)
study
CrossTable(study$공부함,study$합격,chisq=T)
x<-c93,5,8,11,13
부모의 IQ(x): 110,120,130,140,150
부모의 IQ(x)<-c( 110,120,130,140,150)
부모의IQ(x)<-c( 110,120,130,140,150)
parent_iq<-c( 110,120,130,140,150)
child_iq<-c(100,105,128,115,142)
plot(x,h,pch=20,col="res")
plot(x,h,pch=20,col="red")
plot(x,y,pch=20,col="red")
plot(parent_iq,child_iq,pch=20,col="red")
line<-lm(y~x)
line<-lm(y~x)
x<-c( 110,120,130,140,150)
y<-c(100,105,128,115,142)
plot(x,y,pch=20,col="red")
line<-lm(y~x)
line
abline(line,col="blue")
score<-read.csv("score.txt",header=T,sep=",")
score<-read.table("score.txt",header=T,sep=",")
score
#score
attach(score)
score
# lm 예측 모형
lm1<-lm(성적~IQ)
lm1
y<- -5.2918+0.6714*125
y
plot(IQ,성적,pch=20,col="red")
abline(lm1,col="blue")
lm1
?lm
?attach
coef(lm1)
?coef
predict(lm1,newdata=data.frame(x=c(125,125,125,125,125,125,125,125,125,125)))
# 다중 회귀 분석
lm3<- lm(성적~IQ+다니는학원수+게임하는시간+TV시청시간간)
# 다중 회귀 분석
lm3<- lm(성적~IQ+다니는학원수+게임하는시간+TV시청시간)
lm3
y=23.2992+(0.4684*130)+(0.7179*3)-(0.8390*2)-(1.3854*1)
y
